Libraries:
- Lucide (icons) : npm install lucide-react
- Reading time: npm install reading-time
- Luxon (date & time): yarn add @types/luxon (sometimes you have to install types seperately for typescript)
- Container queries : npm install @tailwindcss/container-queries
- DirectusSDK : yarn add @directus/sdk

i18:
- yarn add @formatjs/intl-localematcher
- yarn add negotiator
- yarn add @types/negotiator



Noted: 
pics dim: (2000 x 1380) -- Image Dimensions are off.


 SEO:
 - Canonical means most representive page on your site


 export const generateMetadata = async ({params:{lang}}: {params: {lang:string}}) => {

  //Get Dictionary based on lang
  const dictionary = await getDictionary(lang)

  return {
    title: {
      template: "%s | " + siteConfig.siteName,
      default: siteConfig.siteName,
    },
    description: dictionary.footer.description,
    openGraph: {
      title: siteConfig.siteName,
      description: dictionary.footer.description,
      url:`${process.env.NEXT_PUBLIC_SITE_URL}/${lang}`,
      siteName: siteConfig.siteName,
     images: [
        {
          url: "https://localhost:3000/opengraph-image.png",
          width: 1200,
          height: 628,
        },
  
      ],
      locale: lang,
      type: 'website',
    },
    alternates: {
      canonical: `${process.env.NEXT_PUBLIC_SITE_URL}`,
      languages: {
         'en-US': `${process.env.NEXT_PUBLIC_SITE_URL}/en`,
        'es-ES': `${process.env.NEXT_PUBLIC_SITE_URL}/es`,
      }
    },
    verification: {
      google:"xFa5TJNZlg-4hykrxBaFnWMCWtOgsLM2CAEFn71GZ-s" 
    }
  }

}


********


import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";

import { match as matchLocale } from "@formatjs/intl-localematcher";
import Negotiator from "negotiator";
import { i18n } from "./i18n.config";

/* GET LOCALE HANDLER */
function getLocale(request: NextRequest): string | undefined {
  // Negotiator expects plain object so we need to transform headers
  const negotiatorHeaders: Record<string, string> = {};
  request.headers.forEach((value, key) => (negotiatorHeaders[key] = value));

  // Use negotiator and intl-localematcher to get best locale
  let languages = new Negotiator({ headers: negotiatorHeaders }).languages();
  // @ts-ignore locales are readonly
  const locales: string[] = i18n.locales;
  return matchLocale(languages, locales, i18n.defaultLocale);
}

/* MIDDLEWARE */
export default function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Check if there is any supported locale in the pathname
  const pathnameIsMissingLocale = i18n.locales.every(
    (locale:any) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`
  );

  // Redirect if there is no locale
  if (pathnameIsMissingLocale) {
    const locale = getLocale(request);

    return NextResponse.redirect(
      new URL(`/${locale}/${pathname}`, request.url)
    );
  }
}

/* MATCHER */
export const config = {
  /*
   * Match all request paths except for the ones starting with:
   * - api (API routes)
   * - _next/static (static files)
   * - _next/image (image optimization files)
   * - favicon.ico (favicon file)
   */
  matcher: [
    "/((?!api|_next/static|_next/image|favicon.ico|opengraph-image|robots.txt|sitemap).*)",
  ]
};